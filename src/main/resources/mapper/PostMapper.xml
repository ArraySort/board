<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="arraysort.project.board.app.post.mapper.PostMapper">

    <!-- 게시글 추가 -->
    <insert id="insertPost" parameterType="arraysort.project.board.app.post.domain.PostVO">
        insert into post(user_id,
                         title,
                         content,
                         category,
                         type)
        values (#{userId},
                #{title},
                #{content},
                #{category},
                #{type});
    </insert>

    <!-- 게시글 리스트 조회 -->
    <select id="selectPostListWithPaging" parameterType="arraysort.project.board.app.post.domain.PostListDTO"
            resultType="arraysort.project.board.app.post.domain.PostVO">
        select p.post_id,
               p.user_id,
               u.user_name,
               p.title,
               p.content,
               p.created_at,
               p.updated_at,
               p.category,
               p.type,
               p.views
        from post p
        inner join user u on p.user_id = u.user_id
        <where>
            <if test="dto.search != null and dto.search != ''">
                <choose>
                    <when test="dto.searchType != null and dto.searchType.toString() == 'ALL'">
                        and (p.title like concat('%', #{dto.search}, '%') or p.content like concat('%', #{dto.search}, '%'))
                    </when>
                    <when test="dto.searchType != null and dto.searchType.toString() == 'TITLE'">
                        and p.title like concat('%', #{dto.search}, '%')
                    </when>
                    <when test="dto.searchType != null and dto.searchType.toString() == 'CONTENT'">
                        and p.content like concat('%', #{dto.search}, '%')
                    </when>
                </choose>
            </if>
        </where>

        <choose>
            <when test="dto.sortType.toString() == 'ID'">
                order by p.post_id desc
            </when>

            <when test="dto.sortType.toString() == 'LATEST'">
                order by p.updated_at desc
            </when>

            <when test="dto.sortType.toString() == 'OLDEST'">
                order by p.updated_at asc
            </when>

            <when test="dto.sortType.toString() == 'VIEWS'">
                order by p.views desc
            </when>

            <otherwise>
                order by p.post_id desc
            </otherwise>
        </choose>

        limit #{pageRowCount} offset #{offset}

    </select>

    <!-- 총 게시물 개수 조회 -->
    <select id="selectTotalPostCount" resultType="int">
        select count(*)
        from post
        <where>
            <if test="search != null and search != ''">
                <choose>
                    <when test="searchType != null and searchType.toString() == 'ALL'">
                         (title like concat('%', #{search}, '%') or content like concat('%', #{search}, '%'))
                    </when>
                    <when test="searchType != null and searchType.toString() == 'TITLE'">
                         title like concat('%', #{search}, '%')
                    </when>
                    <when test="searchType != null and searchType.toString() == 'CONTENT'">
                         content like concat('%', #{search}, '%')
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <!-- 게시글 세부내용 조회 -->
    <select id="selectPostDetailByPostId" parameterType="long" resultType="arraysort.project.board.app.post.domain.PostVO">
        select p.post_id,
               p.user_id,
               u.user_name,
               p.title,
               p.content,
               p.created_at,
               p.updated_at,
               p.category,
               p.type,
               p.views
        from post p
        inner join user u on p.user_id = u.user_id
        where post_id = #{postId}
    </select>

    <!-- 게시글 수정 -->
    <update id="updatePost">
        update post
        set title    = #{vo.title},
            content  = #{vo.content},
            category = #{vo.category},
            type     = #{vo.type}
        where post_id = #{postId}
    </update>

    <!-- 게시글 고유번호 조회(유저아이디) -->
    <select id="selectExistPostIdByUserId" resultType="long">
        select post_id
        from post
        where post_id = #{postId}
          and user_id = #{userId}
    </select>

    <select id="selectExistPostId" resultType="long">
        select post_id
        from post
        where post_id = #{postId}
    </select>

    <!-- 게시글 삭제 -->
    <delete id="deletePost">
        delete
        from post
        where post_id = #{postId}
    </delete>

    <!-- 조회수 증가 -->
    <update id="updateViews">
        update post
        set views = views + 1,
            updated_at = updated_at
        where post_id = #{postId}
    </update>

</mapper>
