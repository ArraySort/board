<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="arraysort.project.board.app.post.mapper.PostMapper">

    <!-- 게시글 추가 -->
    <insert id="insertPost" parameterType="arraysort.project.board.app.post.domain.PostVO" useGeneratedKeys="true" keyProperty="postId">
        insert into post(user_id,
                         admin_id,
                         board_id,
                         category_id,
                         image_id,
                         title,
                         content,
                         private_flag,
                         notice_flag,
                         created_by,
                         updated_by)
        values (#{userId},
                #{adminId},
                #{boardId},
                #{categoryId},
                #{imageId},
                #{title},
                #{content},
                #{privateFlag},
                #{noticeFlag},
                #{createdBy},
                #{updatedBy})
    </insert>

    <!-- 게시글 리스트 조회 -->
    <select id="selectPostListWithPaging" resultType="arraysort.project.board.app.post.domain.PostVO">
        select p.post_id,
               p.user_id,
               p.admin_id,
               p.category_id,
               p.image_id,
               u.user_name,
               c.category_name,
               p.title,
               p.views,
               p.private_flag,
               p.notice_flag,
               p.created_at,
               p.updated_at,
               (select count(*)
                from comment cmt
                where cmt.post_id = p.post_id and cmt.delete_flag ='N') as comment_count,
               (select if(exists(select 1
                                 from comment cmt
                                 where cmt.post_id = p.post_id
                                 and cmt.adopted_flag = 'Y' and cmt.delete_flag ='N'),
                        'Y', 'N')) as adopted_comment_flag,
               (select count(*)
                    from post_like
                    where post_id = p.post_id) as like_count
        from post p
        left join user u on p.user_id = u.user_id
        inner join category c on p.category_id = c.category_id
        <where>
            p.board_id = #{boardId} and p.delete_flag = 'N'
            <choose>
                <when test='dto.activateFlag.toString() == "Y"'>
                    and p.activate_flag = 'Y'
                </when>

                <when test='dto.activateFlag.toString() == "N"'>
                     and p.activate_flag = 'N'
                </when>
            </choose>
            <if test="dto.search != null and dto.search != ''">
                <choose>
                    <when test="dto.searchType != null and dto.searchType.toString() == 'ALL'">
                        and (p.title like concat('%', #{dto.search}, '%') or p.content like concat('%', #{dto.search}, '%'))
                    </when>

                    <when test="dto.searchType != null and dto.searchType.toString() == 'TITLE'">
                        and p.title like concat('%', #{dto.search}, '%')
                    </when>

                    <when test="dto.searchType != null and dto.searchType.toString() == 'CONTENT'">
                        and p.content like concat('%', #{dto.search}, '%')
                    </when>
                </choose>
            </if>
        </where>

        <choose>
            <when test="dto.sortType.toString() == 'LATEST'">
                order by p.notice_flag desc,
                         p.updated_at desc
            </when>

            <when test="dto.sortType.toString() == 'OLDEST'">
                order by p.notice_flag desc,
                         p.updated_at asc
            </when>

            <when test="dto.sortType.toString() == 'VIEWS'">
                order by p.notice_flag desc,
                         p.views desc
            </when>

            <otherwise>
                order by p.notice_flag desc,
                         p.created_at desc
            </otherwise>
        </choose>

        limit #{pageRowCount} offset #{offset}
    </select>

    <!-- 총 게시물 개수 조회 -->
    <select id="selectTotalPostCount" resultType="int">
        select count(*)
        from post
        <where>
            board_id = #{boardId} and delete_flag = 'N'
            <choose>
                <when test='dto.activateFlag.toString() == "Y"'>
                    and activate_flag = 'Y'
                </when>

                <when test='dto.activateFlag.toString() == "N"'>
                    and activate_flag = 'N'
                </when>
            </choose>
            <if test="dto.search != null and dto.search != ''">
                <choose>
                    <when test="dto.searchType != null and dto.searchType.toString() == 'ALL'">
                         and (title like concat('%', #{dto.search}, '%') or content like concat('%', #{dto.search}, '%'))
                    </when>
                    <when test="dto.searchType != null and dto.searchType.toString() == 'TITLE'">
                         and title like concat('%', #{dto.search}, '%')
                    </when>
                    <when test="dto.searchType != null and dto.searchType.toString() == 'CONTENT'">
                         and content like concat('%', #{dto.search}, '%')
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <!-- 게시글 세부내용 조회 -->
    <select id="selectPostDetailByPostId" resultType="arraysort.project.board.app.post.domain.PostVO">
        select p.post_id,
               p.user_id,
               p.admin_id,
               p.board_id,
               p.image_id,
               u.user_name,
               b.board_name,
               c.category_name,
               p.title,
               p.content,
               p.private_flag,
               p.notice_flag,
               p.activate_flag,
               p.delete_flag,
               p.created_at,
               p.updated_at,
               p.views,
               (select count(*)
                from comment cmt
                where cmt.post_id = p.post_id and cmt.delete_flag ='N') as comment_count,
               (select count(*)
                from post_like
                where post_id = p.post_id) as like_count,
               (select count(*)
                from post_dislike
                where post_id = p.post_id) as dislike_count,
               (select exists(
                   select 1
                   from post_like
                   where user_id = #{userId} and post_id = p.post_id)) as has_liked,
               (select exists(
                   select 1
                   from post_dislike
                   where user_id = #{userId} and post_id = p.post_id))as has_disliked
        from post p
        left join user u on p.user_id = u.user_id
        inner join category c on p.category_id = c.category_id
        inner join board b on p.board_id = b.board_id
        where post_id = #{postId} and c.board_id = #{boardId}
    </select>

    <!-- 게시글 수정 -->
    <update id="updatePost">
        update post
        set image_id = #{vo.imageId},
            title = #{vo.title},
            content = #{vo.content},
            private_flag = #{vo.privateFlag},
            notice_flag = #{vo.noticeFlag},
            category_id = #{vo.categoryId}
        where post_id = #{postId}
    </update>

    <!-- 게시글 고유번호 조회 -->
    <select id="selectExistPostId" parameterType="long" resultType="int">
        select post_id
        from post
        where post_id = #{postId}
    </select>

    <!-- 게시글 삭제 -->
    <delete id="deletePost" parameterType="long">
        update post
        set delete_flag = 'Y'
        where post_id = #{postId}
    </delete>

    <!-- 홈페이지 : 상위 5개 게시물 조회 -->
    <select id="selectTopPostsByBoardId">
        select p.post_id,
               p.user_id,
               p.admin_id,
               p.category_id,
               p.image_id,
               u.user_name,
               c.category_name,
               p.title,
               p.content,
               p.views,
               p.private_flag,
               p.notice_flag,
               p.created_at,
               p.updated_at,
               (select count(*)
                from comment cmt
                where cmt.post_id = p.post_id and cmt.delete_flag ='N') as comment_count,
               (select if(exists(select 1
                                 from comment cmt
                                 where cmt.post_id = p.post_id
                                   and cmt.adopted_flag = 'Y' and cmt.delete_flag ='N'),
                          'Y', 'N')) as adopted_comment_flag,
               (select count(*)
                from post_like
                where post_id = p.post_id) as like_count
        from post p
        left join user u on p.user_id = u.user_id
        inner join category c on p.category_id = c.category_id
        where p.board_id = #{boardId} and p.delete_flag = 'N'
        order by p.created_at desc
        limit #{postCount}
    </select>

    <!-- 관리자 : 관리자 홈페이지 최근 게시글 조회 -->
    <select id="selectRecentPosts" resultType="arraysort.project.board.app.post.domain.PostVO">
        select p.post_id,
               p.user_id,
               p.admin_id,
               p.category_id,
               p.image_id,
               u.user_name,
               c.category_name,
               p.title,
               p.content,
               p.views,
               p.private_flag,
               p.notice_flag,
               p.created_at,
               p.updated_at,
               (select count(*)
                from comment cmt
                where cmt.post_id = p.post_id and cmt.delete_flag ='N') as comment_count,
               (select if(exists(select 1
                                 from comment cmt
                                 where cmt.post_id = p.post_id
                                   and cmt.adopted_flag = 'Y' and cmt.delete_flag ='N'),
                          'Y', 'N')) as adopted_comment_flag,
               (select count(*)
                from post_like
                where post_id = p.post_id) as like_count
        from post p
                 left join user u on p.user_id = u.user_id
                 inner join category c on p.category_id = c.category_id
        where p.delete_flag = 'N'
        order by p.created_at desc
        limit #{postCount}
    </select>

    <!-- 조회수 증가 -->
    <update id="updateViews" parameterType="long">
        update post
        set views = views + 1,
            updated_at = updated_at
        where post_id = #{postId}
    </update>

    <!-- 관리자 : 카테고리 사용 여부 반환 -->
    <select id="selectIsCategoryInUse" parameterType="long" resultType="boolean">
        select exists(
            select 1
            from post
            where category_id = #{categoryId} and delete_flag = 'N' and activate_flag = 'Y'
        )
    </select>

    <!-- 관리자 : 게시글 활성화 상태 변경 -->
    <update id="updateActivateFlag">
        update post
        set activate_flag = #{flag}
        where board_id = #{boardId} and post_id = ${postId}
    </update>

    <!-- 관리자 : 공지사항 게시글 개수 반환 -->
    <select id="selectNoticePostCount" resultType="int">
        select count(*)
        from post
        where board_id = #{boardId}
          and notice_flag = 'Y'
          and delete_flag = 'N'
          and activate_flag = 'Y'
    </select>

    <!-- 관리자 : 총 게시글 조회수 조회 -->
    <select id="selectAllViews" resultType="long">
        select sum(views)
        from post
        where delete_flag = 'N' and activate_flag = 'Y'
    </select>

    <!-- 관리자 : 총 게시글 조회수 조회 -->
    <select id="selectAllPostsCount" resultType="long">
        select count(*)
        from post
        where delete_flag = 'N' and activate_flag = 'Y'
    </select>

</mapper>
