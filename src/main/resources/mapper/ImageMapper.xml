<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="arraysort.project.board.app.image.mapper.ImageMapper">

    <!-- 이미지 추가 -->
    <insert id="insertImage" useGeneratedKeys="true" keyProperty="imageId"
            parameterType="arraysort.project.board.app.image.domain.ImageVO">
        insert into image(original_name,
                          saved_name,
                          size,
                          image_path,
                          created_by)
        values
                (#{originalName},
                 #{savedName},
                 #{size},
                 #{imagePath},
                 #{createdBy})
    </insert>

    <!-- 게시글 이미지 관계 추가 -->
    <insert id="insertPostImage" parameterType="arraysort.project.board.app.image.domain.PostImageVO">
        insert into post_image (post_id, image_id)
        values
            <foreach collection="postImages" item="postImage" separator=",">
                (#{postImage.postId}, #{postImage.imageId})
            </foreach>
    </insert>

    <!-- 게시글 세부조회 -> 이미지 조회(이미지 ID) -->
    <select id="selectImageById" parameterType="long" resultType="arraysort.project.board.app.image.domain.ImageVO">
        select image_id,
               original_name,
               saved_name,
               size,
               image_path,
               created_by,
               created_at,
               delete_flag
        from image
        where image_id = #{imageId}
    </select>

    <!-- 게시글 세부조회 -> 이미지 리스트 조회(게시글 ID) -->
    <select id="selectImagesByPostId" parameterType="long" resultType="arraysort.project.board.app.image.domain.ImageVO">
        select i.image_id,
               i.original_name,
               i.saved_name,
               i.size,
               i.image_path,
               i.created_by,
               i.created_at,
               i.delete_flag
        from image i
        inner join post_image pi on i.image_id = pi.image_id
        where pi.post_id = #{postId} and i.delete_flag = 'N'
    </select>

    <!-- 게시글 수정 -> 이미지 삭제 -->
    <update id="deleteImages" parameterType="long">
        update image
        set delete_flag = 'Y'
            where image_id in
            <foreach collection="imageIds" item="imageId" open="(" separator="," close=")">
                #{imageId}
            </foreach>
    </update>

    <!-- 게시글 이미지 관계 삭제 -->
    <delete id="deletePostImageByPostId" parameterType="long">
        delete
        from post_image
            where image_id in
            <foreach collection="imageIds" item="imageId" open="(" separator="," close=")">
                #{imageId}
            </foreach>
    </delete>

    <!-- 게시글 썸네일 이미지 삭제(유지) -->
    <update id="deleteThumbnailImageByPostId" parameterType="long">
        update image
        set delete_flag = 'Y'
        where image_id = (select image_id from post where post_id = #{postId})
    </update>

    <!-- 게시글 썸네일 이미지 ID 업데이트 -> 썸네일 이미지 수정 시 기존 ImageId null 값으로 변경 -->
    <update id="updateThumbnailImageIdByPostId" parameterType="long">
        update post
        set image_id = null
        where image_id = (select image_id from post where post_id = #{postId})
    </update>

    <!-- 게시글에 존재하는 게시글 이미지 개수 조회 -->
    <select id="selectImageCountByPostId" parameterType="long" resultType="int">
        select count(*)
        from post_image
        where post_id = #{postId}
    </select>

    <!-- 임시게시글 이미지 관계 추가 -->
    <insert id="insertTempPostImage" parameterType="arraysort.project.board.app.image.domain.TempPostImageVO">
        insert into temp_post_image (temp_post_id, image_id)
        values
        <foreach collection="tempPostImages" item="tempPostImage" separator=",">
            (#{tempPostImage.tempPostId}, #{tempPostImage.imageId})
        </foreach>
    </insert>

    <!-- 임시저장 게시글 세부조회 -> 임시저장 이미지 리스트 조회(TempPostId) -->
    <select id="selectImagesByTempPostId" parameterType="long" resultType="arraysort.project.board.app.image.domain.ImageVO">
        select i.image_id,
               i.original_name,
               i.saved_name,
               i.size,
               i.image_path,
               i.created_by,
               i.created_at,
               i.delete_flag
        from image i
                 inner join temp_post_image tpi on i.image_id = tpi.image_id
        where tpi.temp_post_id = #{postId} and i.delete_flag = 'N'
    </select>

    <!-- 임시저장 게시글 게시 -> 임시저장 이미지 삭제(ImageId) -->
    <delete id="deleteTempPostImageByPostId" parameterType="long">
        delete
        from temp_post_image
        where temp_post_id = #{tempPostId}
    </delete>

    <!-- 임시저장 게시글 이미지 삭제-->
    <delete id="deleteTempImages" parameterType="long">
        delete
        from image
        where image_id in
        <foreach collection="imageIds" item="imageId" open="(" separator="," close=")">
            #{imageId}
        </foreach>
    </delete>

    <!-- 임시저장 게시글 게시 -> 썸네일 이미지 수정 시 기존 ImageId 값 삭제 -->
    <delete id="deleteThumbnailImageByTempPostId" parameterType="long">
        delete
        from image
        where image_id = #{imageId}
    </delete>

    <!-- 임시저장 게시글에 존재하는 임시저장 게시글 이미지 개수 조회 -->
    <select id="selectTempImageCountByTempPostId" parameterType="long" resultType="int">
        select count(*)
        from temp_post_image
        where temp_post_id = #{tempPostId}
    </select>

    <!-- 댓글 이미지 관계 추가 -->
    <insert id="insertCommentImage" parameterType="arraysort.project.board.app.image.domain.CommentImageVO">
        insert into comment_image (comment_id, image_id)
        values
        <foreach collection="commentImages" item="commentImage" separator=",">
            (#{commentImage.commentId}, #{commentImage.imageId})
        </foreach>
    </insert>

    <!-- 댓글 이미지 리스트 조회 -->
    <select id="selectCommentImagesByCommentId" parameterType="long" resultType="arraysort.project.board.app.image.domain.ImageVO">
        select i.image_id,
               i.original_name,
               i.saved_name,
               i.size,
               i.image_path,
               i.created_by,
               i.created_at,
               i.delete_flag
        from image i
        inner join comment_image ci on i.image_id = ci.image_id
        where ci.comment_id = #{commentId} and delete_flag = 'N'
    </select>

    <!-- 댓글 아이디 리스트로 이미지 리스트 조회 -->
    <select id="selectCommentImagesByCommentIds" parameterType="java.util.List" resultType="arraysort.project.board.app.image.domain.ImageVO">
        select i.image_id,
               i.original_name,
               i.saved_name,
               i.size,
               i.image_path,
               i.created_by,
               i.created_at,
               i.delete_flag
        from image i
        inner join comment_image ci on i.image_id = ci.image_id
        where ci.comment_id in
        <foreach item="commentId" collection="list" open="(" separator="," close=")">
            #{commentId}
        </foreach>
        and i.delete_flag = 'N'
    </select>

    <!-- 댓글 이미지 개수 조회 -->
    <select id="selectCommentImageCountByCommentId" parameterType="long" resultType="int">
        select count(*)
        from comment_image
        where comment_id = #{commentId}
    </select>

    <!-- 댓글 이미지 관계 삭제 -->
    <delete id="deleteCommentImageByCommentId" parameterType="long">
        delete
        from comment_image
        where image_id in
        <foreach collection="imageIds" item="imageId" open="(" separator="," close=")">
            #{imageId}
        </foreach>
    </delete>

</mapper>
