<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="arraysort.project.board.app.user.mapper.UserMapper">

    <!-- 회원가입 -->
    <insert id="insertUser" parameterType="arraysort.project.board.app.user.domain.UserVO">
        insert into user(user_id,
                         user_password,
                         user_name,
                         zipcode,
                         address,
                         address_detail,
                         access_level,
                         created_by)
        values (#{userId},
                #{userPassword},
                #{userName},
                #{zipcode},
                #{address},
                #{addressDetail},
                #{accessLevel},
                #{createdBy})
    </insert>

    <!-- 아이디 중복 확인을 위한 카운트 -->
    <select id="selectIsExistsByUserId" parameterType="String" resultType="boolean">
        select exists(
            select 1
            from user
            where user_id = #{userId}
        )
    </select>

    <!-- 이름 중복 확인을 위한 카운트 -->
    <select id="selectIsExistsByUserName" parameterType="String" resultType="boolean">
        select exists(
            select 1
            from user
            where user_name = #{userName}
        )
    </select>

    <!-- 유저 세부내용 조회 -->
    <select id="selectUserByUserId" parameterType="String" resultType="arraysort.project.board.app.user.domain.UserVO">
        select user_id,
               user_password,
               user_name,
               access_level,
               access_time,
               login_try_count,
               login_lock,
               point,
               activate_flag,
               created_by,
               created_at,
               updated_at,
               delete_flag,
               daily_comment_count
        from user
        where user_id = #{userId}
    </select>

    <!-- OAuth 회원가입 -->
    <insert id="insertOAuthUser" useGeneratedKeys="true" keyProperty="userId">
        insert into
            user (user_id,
                  user_name,
                  provider,
                  access_level,
                  created_by)
        values
            (#{userId}, #{userName}, #{oAuthProvider}, #{accessLevel}, #{createdBy})
    </insert>

    <!-- OAuth 로 회원가입 한 유저 조회 -->
    <select id="selectOAuthUserByUserId">
        select user_id,
               user_password,
               user_name,
               provider,
               access_level,
               activate_flag,
               created_by,
               created_at,
               updated_at,
               delete_flag
        from user
        where user_id = #{userId}
    </select>

    <!-- 로그인 시도 정보 업데이트 -->
    <update id="updateLoginAttempts">
        update user
        set login_try_count = #{loginTryCount},
            login_lock = #{loginLock}
        where user_id = #{userId}
    </update>

    <!-- 사용자 접근 시간 업데이트 -->
    <update id="updateAccessTime" parameterType="String">
        update user
        set access_time = current_timestamp
        where user_id = #{userId} and delete_flag = 'N' and activate_flag = 'Y'
    </update>

    <!-- 게시글 작성에 따른 사용자 포인트 업데이트 -->
    <update id="updateUserPointForPost">
        update user
        set point = point + #{point}
        where user_id = #{userId} and delete_flag = 'N' and activate_flag = 'Y'
    </update>

    <!-- 댓글 작성에 따른 사용자 포인트 지급 -->
    <update id="updateUserPointForComment">
        update user
        set daily_comment_count = daily_comment_count + 1,
            point = point + #{point}
        where user_id = #{userId} and delete_flag = 'N' and activate_flag = 'Y'
    </update>

    <!-- 일일 최초 로그인 시 포인트 지급 -->
    <update id="updateUserPointForAttendance">
        update user
        set point = point + #{point}
        where user_id = #{userId} and delete_flag = 'N' and activate_flag = 'Y'
    </update>

    <!-- 유저 등업 -->
    <update id="updateUserLevelUp" parameterType="String">
        update user
        set access_level = access_level + 1
        where user_id = #{userId} and delete_flag = 'N' and activate_flag = 'Y'
    </update>

</mapper>
