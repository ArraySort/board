<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="arraysort.project.board.app.comment.mapper.CommentMapper">

    <!-- 댓글 추가 -->
    <insert id="insertComment" parameterType="arraysort.project.board.app.comment.domain.CommentVO" useGeneratedKeys="true" keyProperty="commentId">
        insert into comment(
                            user_id,
                            post_id,
                            parent_id,
                            top_parent_id,
                            depth,
                            comment_content,
                            created_by,
                            updated_by)
        values (#{userId},
                #{postId},
                #{parentId},
                #{topParentId},
                #{depth},
                #{commentContent},
                #{createdBy},
                #{updatedBy})
    </insert>

    <!-- 댓글 리스트 조회(최상위 댓글, 페이징) -->
    <select id="selectTopLevelCommentListWithPaging" resultType="arraysort.project.board.app.comment.domain.CommentVO">
        select c.comment_id,
               c.admin_id,
               c.user_id,
               c.post_id,
               c.parent_id,
               u.user_name,
               c.comment_content,
               c.activate_flag,
               c.adopted_flag,
               c.created_by,
               c.updated_by,
               c.created_at,
               c.updated_at,
               c.delete_flag
        from comment c
        inner join board.user u on c.user_id = u.user_id
        where c.post_id = #{postId} and c.delete_flag = 'N' and c.parent_id is null
        order by c.created_at
        limit #{pageRowCount} offset #{offset}
    </select>

    <!-- 댓글 리스트 조회(모든 대댓글) -->
    <select id="selectRepliesForTopLevelComments" resultType="arraysort.project.board.app.comment.domain.CommentVO">
        select c.comment_id,
               c.admin_id,
               c.user_id,
               c.post_id,
               c.parent_id,
               c.top_parent_id,
               c.depth,
               u.user_name,
               c.comment_content,
               c.activate_flag,
               c.adopted_flag,
               c.created_by,
               c.updated_by,
               c.created_at,
               c.updated_at,
               c.delete_flag
        from comment c
        inner join board.user u on c.user_id = u.user_id
        where c.post_id = #{postId} and c.delete_flag = 'N' and c.top_parent_id in
            <foreach item="id" collection="topParentIds" open="(" separator="," close=")">
                #{id}
            </foreach>
        order by c.top_parent_id, c.depth, c.created_at
    </select>

    <!-- 댓글 리스트 조회(대댓글) -->
    <select id="selectRepliesIdByParentCommentId" parameterType="Long" resultType="Long">
        select comment_id
        from comment
        where parent_id = #{parentId}
    </select>

    <!-- 최상위 댓글 총 개수 조회(페이징) -->
    <select id="selectTotalTopLevelCommentCount" resultType="int">
        select count(*)
        from comment
        where post_id = #{postId} and delete_flag = 'N' and parent_id is null
    </select>

    <!-- 댓글 리스트 조회(게시글 내부 전체) -->
    <select id="selectCommentListByPostId" parameterType="long" resultType="arraysort.project.board.app.comment.domain.CommentVO">
        select comment_id,
               admin_id,
               user_id,
               post_id,
               top_parent_id,
               parent_id,
               depth,
               comment_content,
               activate_flag,
               adopted_flag,
               created_by,
               updated_by,
               created_at,
               updated_at,
               delete_flag
        from comment
        where post_id = #{postId}
    </select>

    <!-- 댓글 조회 -->
    <select id="selectCommentById" parameterType="long" resultType="arraysort.project.board.app.comment.domain.CommentVO">
        select comment_id,
               admin_id,
               user_id,
               post_id,
               parent_id,
               comment_content,
               activate_flag,
               adopted_flag,
               created_by,
               updated_by,
               created_at,
               updated_at,
               delete_flag
        from comment
        where comment_id = #{commentId}
    </select>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="arraysort.project.board.app.comment.domain.CommentVO">
        update comment
        set comment_content = #{commentContent}
        where comment_id = #{commentId}
    </update>

    <!-- 댓글 삭제 -->
    <update id="deleteComment" parameterType="long">
        update comment
        set delete_flag = 'Y'
        where comment_id = #{commentId}
    </update>

</mapper>
