<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="arraysort.project.board.app.comment.mapper.CommentMapper">

    <!-- 댓글 추가 -->
    <insert id="insertComment" parameterType="arraysort.project.board.app.comment.domain.CommentVO" useGeneratedKeys="true" keyProperty="commentId">
        insert into comment(
                            user_id,
                            post_id,
                            parent_id,
                            top_parent_id,
                            depth,
                            comment_content,
                            created_by,
                            updated_by)
        values (#{userId},
                #{postId},
                #{parentId},
                #{topParentId},
                #{depth},
                #{commentContent},
                #{createdBy},
                #{updatedBy})
    </insert>

    <!-- 댓글 리스트 조회(최상위 댓글, 페이징) -->
    <select id="selectTopLevelCommentListWithPaging" resultMap="commentWithImagesResultMap">
        select c.comment_id,
               c.admin_id,
               c.user_id,
               c.post_id,
               c.top_parent_id,
               c.parent_id,
               c.depth,
               u.user_name,
               c.comment_content,
               c.activate_flag,
               c.adopted_flag,
               c.created_by,
               c.updated_by,
               c.created_at,
               c.updated_at,
               c.delete_flag,
               (select count(*)
                from comment_like
                where comment_id = c.comment_id) as like_count,
               (select count(*)
                from comment_dislike
                where comment_id = c.comment_id) as dislike_count,
               (select exists(
                select 1
                from comment_like
                where user_id = #{userId} and comment_id = c.comment_id)) as has_liked,
               (select exists(
                select 1
                from comment_dislike where user_id = #{userId} and comment_id = c.comment_id))as has_disliked,
               i.image_id,
               i.original_name,
               i.saved_name,
               i.size,
               i.image_path,
               i.created_by,
               i.created_at,
               i.delete_flag,
               i.created_by as image_created_by,
               i.created_at as image_created_at,
               i.delete_flag as image_delete_flag
        from comment c
        inner join user u on c.user_id = u.user_id
        left join comment_image ci on c.comment_id = ci.comment_id
        left join image i on ci.image_id = i.image_id
        where c.post_id = #{postId} and c.delete_flag = 'N' and c.parent_id is null
        order by c.adopted_flag desc,
                 c.created_at desc
        limit #{pageRowCount} offset #{offset}
    </select>

    <!-- 댓글 리스트 조회(모든 대댓글) -->
    <select id="selectRepliesForTopLevelComments" resultMap="commentWithImagesResultMap">
        select c.comment_id,
               c.admin_id,
               c.user_id,
               c.post_id,
               c.top_parent_id,
               c.parent_id,
               c.depth,
               u.user_name,
               c.comment_content,
               c.activate_flag,
               c.adopted_flag,
               c.created_by,
               c.updated_by,
               c.created_at,
               c.updated_at,
               c.delete_flag,
               (select count(*)
               from comment_like
               where comment_id = c.comment_id) as like_count,
               (select count(*)
               from comment_dislike
               where comment_id = c.comment_id) as dislike_count,
               (select exists(
               select 1
               from comment_like
               where user_id = #{userId} and comment_id = c.comment_id)) as has_liked,
               (select exists(
               select 1
               from comment_dislike where user_id = #{userId} and comment_id = c.comment_id))as has_disliked,
               i.image_id,
               i.original_name,
               i.saved_name,
               i.size,
               i.image_path,
               i.created_by,
               i.created_at,
               i.delete_flag,
               i.created_by as image_created_by,
               i.created_at as image_created_at,
               i.delete_flag as image_delete_flag
        from comment c
        inner join user u on c.user_id = u.user_id
        left join comment_image ci on c.comment_id = ci.comment_id
        left join image i on ci.image_id = i.image_id
        where c.post_id = #{postId} and c.delete_flag = 'N' and c.top_parent_id in
            <foreach item="id" collection="topParentIds" open="(" separator="," close=")">
                #{id}
            </foreach>
        order by c.top_parent_id, c.depth, c.created_at desc
    </select>

    <!-- 댓글 리스트 조회(대댓글) -->
    <select id="selectRepliesIdByParentCommentId" parameterType="Long" resultType="Long">
        select comment_id
        from comment
        where parent_id = #{parentId}
    </select>

    <!-- 최상위 댓글 총 개수 조회(페이징) -->
    <select id="selectTotalTopLevelCommentCount" resultType="int">
        select count(*)
        from comment
        where post_id = #{postId} and delete_flag = 'N' and parent_id is null
    </select>

    <!-- 댓글 리스트 조회(게시글 내부 전체) -->
    <select id="selectCommentListByPostId" parameterType="long" resultType="arraysort.project.board.app.comment.domain.CommentVO">
        select comment_id,
               admin_id,
               user_id,
               post_id,
               top_parent_id,
               parent_id,
               depth,
               comment_content,
               activate_flag,
               adopted_flag,
               created_by,
               updated_by,
               created_at,
               updated_at,
               delete_flag
        from comment
        where post_id = #{postId}
    </select>

    <!-- 댓글 조회 -->
    <select id="selectCommentById" parameterType="long" resultType="arraysort.project.board.app.comment.domain.CommentVO">
        select comment_id,
               admin_id,
               user_id,
               post_id,
               parent_id,
               comment_content,
               activate_flag,
               adopted_flag,
               created_by,
               updated_by,
               created_at,
               updated_at,
               delete_flag
        from comment
        where comment_id = #{commentId}
    </select>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="arraysort.project.board.app.comment.domain.CommentVO">
        update comment
        set comment_content = #{commentContent},
            updated_by = #{updatedBy}
        where comment_id = #{commentId}
    </update>

    <!-- 댓글 삭제 -->
    <update id="deleteComment">
        update comment
        set delete_flag = 'Y',
            updated_by = #{userId}
        where comment_id = #{commentId}
    </update>

    <!-- 댓글 삭제(게시글 ID) -->
    <update id="deleteCommentsByPostId">
        update comment
        set delete_flag = 'Y',
            updated_by = #{userId}
        where post_id = #{postId}
    </update>

    <!-- 댓글 채택 여부 업데이트 -->
    <update id="updateIsAdopted">
        update comment
        set adopted_flag = 'Y',
            updated_by = #{userId}
        where comment_id = #{commentId} and post_id = #{postId}
    </update>

    <!-- 댓글 채택 여부 초기화 -->
    <update id="resetAdoptedComment">
        update comment
        set adopted_flag = 'N',
            updated_by = #{userId}
        where post_id = #{postId} and adopted_flag = 'Y'
    </update>

    <!-- 관리자 : 모든 댓글 수 조회-->
    <select id="selectAllCommentsCount" resultType="long">
        select count(*)
        from comment
        where delete_flag = 'N' and activate_flag = 'Y'
    </select>

    <!-- 댓글과 이미지 매핑 정의 -->
    <resultMap id="commentWithImagesResultMap" type="arraysort.project.board.app.comment.domain.CommentVO">
        <id property="commentId" column="comment_id"/>
        <result property="adminId" column="admin_id"/>
        <result property="userId" column="user_id"/>
        <result property="postId" column="post_id"/>
        <result property="topParentId" column="top_parent_id"/>
        <result property="parentId" column="parent_id"/>
        <result property="depth" column="depth"/>
        <result property="userName" column="user_name"/>
        <result property="commentContent" column="comment_content"/>
        <result property="activateFlag" column="activate_flag"/>
        <result property="adoptedFlag" column="adopted_flag"/>
        <result property="createdBy" column="created_by"/>
        <result property="updatedBy" column="updated_by"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="deleteFlag" column="delete_flag"/>
        <result property="likeCount" column="like_count"/>
        <result property="dislikeCount" column="dislike_count"/>
        <result property="hasLiked" column="has_liked"/>
        <result property="hasDisliked" column="has_disliked"/>

        <!-- 이미지 리스트 매핑 -->
        <collection property="commentImages" ofType="arraysort.project.board.app.image.domain.ImageVO">
            <id property="imageId" column="image_id"/>
            <result property="originalName" column="original_name"/>
            <result property="savedName" column="saved_name"/>
            <result property="size" column="size"/>
            <result property="imagePath" column="image_path"/>
            <result property="createdBy" column="image_created_by"/>
            <result property="createdAt" column="image_created_at"/>
            <result property="deleteFlag" column="image_delete_flag"/>
        </collection>
    </resultMap>

</mapper>
